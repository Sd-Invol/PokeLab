{"version":3,"sources":["data_processor.js","PokemonSelector.js","StatusCalculator.js","App.js","serviceWorker.js","index.js"],"names":["pokemonSelectList","duplicatedForms","idx","pokemons","pokemon","evolution","length","includes","id","form","select","value","key","name","cn","push","PokemonSelector","props","handleChange","bind","pokemonList","dataProcessor","map","MenuItem","src","process","style","height","alt","event","this","onPokemonChange","target","FormControl","minWidth","InputLabel","Select","onChange","PropTypes","number","func","React","Component","StatusCalculator","handleEVBlur","state","IVs","EVs","natureBuff","natureNerf","updateStats","prevProps","level","base","hp","atk","def","spatk","spdef","spe","values","getBaseValues","stats","i","Math","floor","nature","setState","onStatsChange","e","Number","newValue","sum","min","max","round","texts","Grid","container","direction","item","xs","reduce","a","b","x","Input","inputProps","step","handleIVChanges","type","size","Slider","handleEVChanges","handleEVInputChanges","onBlur","Radio","checked","color","arrayOf","App","handlePokemonChange","calDamage","move","types_cn_to_en","types","foeId","extreme","moves","power","class","typeBonus","maxDamage","maxPercent","toFixed","spa","moveSet","filter","isNaN","sort","damages","getDamage","List","dense","ListItem","button","alignItems","onClick","selected","toLowerCase","marginRight","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7794556c.chunk.js","sourcesContent":["import pokemons from './data/pokemons';\n// import moves from './data/moves';\n// import types from './data/types';\n\nlet pokemonSelectList = [];\nconst duplicatedForms = [25, 423, 550, 647, 773, 778, 845, 849, 855, 869, 875, 877, 890, 893];\n\nfor (let idx in pokemons) {\n    let pokemon = pokemons[idx];\n\n    if (pokemon.evolution.length > 0) {\n        continue;\n    }\n\n    // Removed as Pokemon home is opened.\n    // if (pokemon.galardex < 0) {\n    //     continue;\n    // }\n\n    if (duplicatedForms.includes(pokemon.id) && pokemon.form > 0) {\n        continue;\n    }\n\n    let select = {\n        value: idx,\n        key: pokemon.id + '_' + pokemon.form,\n        name: pokemon.name.cn + ` #${pokemon.id}`,\n    };\n    pokemonSelectList.push(select);\n}\n\n// let types_cn_to_en = {};\n// for (let type in types) {\n//     types_cn_to_en[types[type].cn] = type;\n// }\n\n// for (let idx in pokemons) {\n//     let pokemon = pokemons[idx];\n\n//     let moveByType = {};\n//     for (let moveId of pokemon.moves) {\n//         const move = moves[moveId];\n//         if (move.class === '变化') {\n//             continue;\n//         }\n//         if (!(move.type in moveByType)) {\n//             moveByType[move.type] = {\n//                 physical: [],\n//                 special: [],\n//             }\n//         }\n//         if (move.class === '物理') {\n//             moveByType[move.type].physical.push(move);\n//         }\n//         if (move.class === '特殊') {\n//             moveByType[move.type].special.push(move);\n//         }\n//     }\n//     for (let type in moveByType) {\n//         moveByType[type].physical = moveByType[type].physical.sort(\n//             (a, b) => Number(b.power) - Number(a.power));\n//         moveByType[type].special = moveByType[type].special.sort(\n//             (a, b) => Number(b.power) - Number(a.power));\n//     }\n// }\n\nexport { pokemonSelectList };\n","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport PropTypes from 'prop-types';\nimport * as dataProcessor from './data_processor.js';\n\nclass PokemonSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n\n        this.pokemonList = dataProcessor.pokemonSelectList.map((pokemon) => (\n            <MenuItem value={pokemon.value} key={pokemon.key}>\n                <span>\n                    <img src={process.env.PUBLIC_URL + `/sprites/${pokemon.key}.png`} style={{ height: \"50px\" }}\n                        alt={pokemon.idx}\n                    />\n                </span>\n                <span>{pokemon.name}</span>\n            </MenuItem>\n        ));\n    }\n\n    static get propTypes() {\n        return {\n            id: PropTypes.number,\n            onPokemonChange: PropTypes.func\n        };\n    }\n\n    handleChange(event) {\n        this.props.onPokemonChange(event.target.value);\n    }\n\n    render() {\n        return (\n            <FormControl style={{ minWidth: 240 }}>\n                <InputLabel>宝可梦</InputLabel>\n                <Select\n                    value={this.props.id}\n                    onChange={this.handleChange}>\n                    {this.pokemonList}\n                </Select>\n            </FormControl>\n        );\n    }\n}\n\nexport default PokemonSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Input from '@material-ui/core/Input';\nimport Slider from '@material-ui/core/Slider';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\n\nimport pokemons from './data/pokemons';\n\nclass StatusCalculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleEVBlur = this.handleEVBlur.bind(this);\n\n        this.state = {\n            IVs: [31, 31, 31, 31, 31, 31],\n            EVs: [0, 0, 0, 0, 0, 0],\n            natureBuff: 0,\n            natureNerf: 0,\n        };\n    }\n\n    static get propTypes() {\n        return {\n            pokemon: PropTypes.number,\n            level: PropTypes.number,\n            stats: PropTypes.arrayOf(PropTypes.number),\n            onStatsChange: PropTypes.func,\n        };\n    }\n\n    componentDidMount() {\n        this.updateStats(this.state.IVs, this.state.EVs, 0, 0);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.pokemon !== prevProps.pokemon ||\n            this.props.level !== prevProps.level) {\n            this.updateStats(this.state.IVs, this.state.EVs,\n                this.state.natureBuff, this.state.natureNerf);\n        }\n    }\n\n    getBaseValues() {\n        const base = pokemons[this.props.pokemon].base;\n        return [base.hp, base.atk, base.def, base.spatk, base.spdef, base.spe];\n    }\n\n    updateStats(IVs, EVs, natureBuff, natureNerf) {\n        const values = this.getBaseValues();\n        let stats = [];\n        for (let i = 0; i < 6; ++i) {\n            const base = Math.floor(this.props.level * (values[i] * 2 + IVs[i] + EVs[i] / 4) / 100);\n            if (i === 0) {\n                stats.push(base + this.props.level + 10);\n            } else {\n                let nature = 1;\n                if (natureBuff !== natureNerf) {\n                    if (natureBuff === i) {\n                        nature = 1.1;\n                    }\n                    if (natureNerf === i) {\n                        nature = 0.9;\n                    }\n                }\n                stats.push(Math.floor((base + 5) * nature));\n            }\n        }\n        this.setState({\n            IVs: IVs,\n            EVs: EVs,\n            natureBuff: natureBuff,\n            natureNerf: natureNerf,\n        });\n        this.props.onStatsChange(stats);\n    }\n\n    handleIVChanges(idx, e) {\n        let IVs = this.state.IVs;\n        IVs[idx] = Number(e.target.value);\n        this.updateStats(IVs, this.state.EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    handleEVChanges(idx, e, newValue) {\n        let EVs = this.state.EVs;\n        let sum = 0;\n        for (let value of EVs) {\n            sum += value;\n        }\n        sum -= EVs[idx];\n        EVs[idx] = Math.min(newValue, 508 - sum);\n        this.updateStats(this.state.IVs, EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    handleEVInputChanges(idx, e) {\n        let EVs = this.state.EVs;\n        let sum = 0;\n        for (let value of EVs) {\n            sum += value;\n        }\n        sum -= EVs[idx];\n        EVs[idx] = Math.min(Number(e.target.value), 508 - sum);\n        this.updateStats(this.state.IVs, EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    handleEVBlur() {\n        let EVs = this.state.EVs;\n        for (let i = 0; i < 6; ++i) {\n            EVs[i] = Math.max(0, Math.min(252, EVs[i]));\n            EVs[i] = Math.round(EVs[i] / 4) * 4;\n        }\n        this.updateStats(this.state.IVs, EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    render() {\n        const values = this.getBaseValues();\n        const texts = [\"HP\", \"物攻\", \"物防\", \"特攻\", \"特防\", \"速度\"];\n        return (\n            <Grid container direction=\"column\">\n                <Grid container direction=\"row\">\n                    <Grid item xs></Grid>\n                    <Grid item xs>种族值</Grid>\n                    <Grid item xs>个体值</Grid>\n                    <Grid item xs>努力值({\n                        510 - this.state.EVs.reduce((a, b) => a + b, 0)\n                    })</Grid>\n                    <Grid item xs></Grid>\n                    <Grid item xs>性格修正</Grid>\n                    <Grid item xs>能力</Grid>\n                </Grid>\n                {[0, 1, 2, 3, 4, 5].map((x) => (\n                    <Grid container direction=\"row\" key={x}>\n                        <Grid item xs> {texts[x]}</Grid>\n                        <Grid item xs> {values[x]}</Grid>\n                        <Grid item xs>\n                            <Input\n                                inputProps={{ min: 0, max: 31, step: 1 }}\n                                value={this.state.IVs[x]}\n                                onChange={this.handleIVChanges.bind(this, x)}\n                                type=\"number\"\n                                size=\"small\"\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <Slider\n                                value={this.state.EVs[x]}\n                                onChange={this.handleEVChanges.bind(this, x)}\n                                step={4}\n                                min={0}\n                                max={252}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <Input\n                                value={this.state.EVs[x]}\n                                onChange={this.handleEVInputChanges.bind(this, x)}\n                                onBlur={this.handleEVBlur}\n                                inputProps={{\n                                    step: 4,\n                                    min: 0,\n                                    max: 252,\n                                    type: 'number',\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <Radio\n                                checked={this.state.natureBuff === x}\n                                onChange={() => {\n                                    this.updateStats(this.state.IVs,\n                                        this.state.EVs, x, this.state.natureNerf);\n                                }}\n                                value={x} />\n                            <Radio\n                                color='primary'\n                                checked={this.state.natureNerf === x}\n                                onChange={() => {\n                                    this.updateStats(this.state.IVs,\n                                        this.state.EVs, this.state.natureBuff, x);\n                                }}\n                                value={x} />\n                        </Grid>\n                        <Grid item xs>\n                            {this.props.stats[x]}\n                        </Grid>\n                    </Grid>\n                ))}\n            </Grid>\n        );\n    }\n}\n\nexport default StatusCalculator;","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport './App.css';\n\nimport PokemonSelector from './PokemonSelector.js'\nimport StatusCalculator from './StatusCalculator.js'\nimport * as dataProcessor from './data_processor.js';\n\nimport pokemons from './data/pokemons';\nimport moves from './data/moves';\nimport types from './data/types';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handlePokemonChange = this.handlePokemonChange.bind(this);\n        this.calDamage = this.calDamage.bind(this);\n\n        this.state = {\n            pokemon: 5,\n            level: 50,\n            stats: [0, 0, 0, 0, 0, 0],\n            move: -1,\n        };\n\n        this.types_cn_to_en = {};\n        for (let type in types) {\n            this.types_cn_to_en[types[type].cn] = type;\n        }\n    }\n\n    handlePokemonChange(id) {\n        this.setState({ pokemon: Number(id), move: -1 });\n    }\n\n    calDamage(foeId, extreme) {\n        if (this.state.move === -1) {\n            return \"\";\n        }\n\n        const move = moves[this.state.move];\n        const base = pokemons[foeId].base;\n\n        let hp = base.hp, def = base.def, power = Number(move.power);\n        if (move.class === '特殊') {\n            def = base.spdef;\n            power *= this.state.stats[3];\n        } else {\n            power *= this.state.stats[1];\n        }\n\n        if (!extreme) {\n            hp = Math.floor(this.state.level * (hp * 2 + 31) / 100) + this.state.level + 10;\n            def = Math.floor(this.state.level * (def * 2 + 31) / 100) + 5;\n        } else {\n            hp = Math.floor(this.state.level * (hp * 2 + 31 + 63) / 100) + this.state.level + 10;\n            def = Math.floor((Math.floor(this.state.level * (def * 2 + 31 + 63) / 100) + 5) * 1.1);\n        }\n\n        let typeBonus = 1;\n        for (let type of pokemons[this.state.pokemon].type) {\n            if (types[type].cn === move.type) {\n                typeBonus *= 1.5;\n            }\n        }\n        let type = types[this.types_cn_to_en[move.type]];\n        for (let t of pokemons[foeId].type) {\n            typeBonus *= type[t];\n        }\n        let maxDamage = ((2 * this.state.level + 10) / 250 * power / def + 2) * typeBonus;\n        let minDamage = maxDamage * 0.85;\n        let maxPercent = maxDamage / hp * 100;\n        let minPercent = minDamage / hp * 100;\n\n        return `[${minPercent.toFixed(2)}%, ${maxPercent.toFixed(2)}%]`;\n    }\n\n    getDamage(foeId) {\n        if (this.state.move === -1) {\n            return 0;\n        }\n\n        const move = moves[this.state.move];\n        const base = pokemons[foeId].base;\n\n        let hp = base.hp, def = base.def, power = Number(move.power);\n        if (move.class === '特殊') {\n            def = base.spdef;\n            power *= this.state.stats[3];\n        } else {\n            power *= this.state.stats[1];\n        }\n\n        hp = Math.floor(this.state.level * (hp * 2 + 31) / 100) + this.state.level + 10;\n        def = Math.floor(this.state.level * (def * 2 + 31) / 100) + 5;\n\n        let typeBonus = 1;\n        for (let type of pokemons[this.state.pokemon].type) {\n            if (types[type].cn === move.type) {\n                typeBonus *= 1.5;\n            }\n        }\n        let type = types[this.types_cn_to_en[move.type]];\n        for (let t of pokemons[foeId].type) {\n            typeBonus *= type[t];\n        }\n        return ((2 * this.state.level + 10) / 250 * power / def + 2) * typeBonus / hp;\n    }\n\n    render() {\n        const pokemon = this.state.pokemon;\n        const atk = this.state.stats[1];\n        const spa = this.state.stats[3];\n        const power = function (x) {\n            let typeBonus = 1;\n            for (let type of pokemons[pokemon].type) {\n                if (types[type].cn === moves[x].type) {\n                    typeBonus = 1.5;\n                }\n            }\n            if (moves[x].class === '物理') {\n                return atk * Number(moves[x].power) * typeBonus;\n            } else {\n                return spa * Number(moves[x].power) * typeBonus;\n            }\n        };\n        const moveSet = pokemons[this.state.pokemon].moves\n            .filter((x) => moves[x].class !== '变化' && !isNaN(moves[x].power))\n            .sort((a, b) => power(b) - power(a));\n\n\n        const damages = {};\n        for (let pokemon of dataProcessor.pokemonSelectList) {\n            damages[pokemon.value] = this.getDamage(pokemon.value, false);\n        }\n\n        return (\n            <div>\n                <Grid container direction=\"row\">\n                    <Grid item xs={3}>\n                        <PokemonSelector\n                            id={this.state.pokemon}\n                            onPokemonChange={this.handlePokemonChange} />\n                    </Grid>\n                    <Grid item xs={9}>\n                        <StatusCalculator\n                            pokemon={this.state.pokemon}\n                            level={50}\n                            stats={this.state.stats}\n                            onStatsChange={(stats) => this.setState({ stats: stats })} />\n                    </Grid>\n                </Grid>\n                <Grid container direction=\"row\">\n                    <Grid item xs={2}>\n                        <List dense={true}>\n                            {moveSet.map(x => (\n                                <ListItem button key={moves[x].id}\n                                          alignItems=\"center\"\n                                          onClick={() => this.setState({ move: moves[x].id })}\n                                          selected={this.state.move === moves[x].id}>\n                                    <img src={process.env.PUBLIC_URL  + `/types/${this.types_cn_to_en[moves[x].type].toLowerCase()}.svg`} \n                                         style={{ height: \"20px\", marginRight: \"2px\" }} alt={x}/>\n                                    <span>{moves[x].name.cn}({moves[x].power})</span>\n                                </ListItem>))}\n                        </List>\n                    </Grid>\n                    <Grid item xs={10}>\n                        <TableContainer>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell align=\"right\">宝可梦</TableCell>\n                                        <TableCell align=\"right\">无耐久伤害</TableCell>\n                                        <TableCell align=\"right\">极限耐久伤害</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {dataProcessor.pokemonSelectList.sort((a, b) =>\n                                        damages[b.value] - damages[a.value]\n                                    ).map((pokemon) => (\n                                        <TableRow key={pokemon.value}>\n                                            <TableCell align=\"right\">\n                                                <div style={{ height: \"32px\" }}>\n                                                    <img src={process.env.PUBLIC_URL + `/sprites/${pokemon.key}.png`}\n                                                        alt={pokemon.idx}\n                                                        style={{ height: \"100%\" }}/>\n                                                    <span>\n                                                        {pokemon.name}\n                                                    </span>\n                                                </div>\n                                            </TableCell>\n                                            <TableCell align=\"right\">{this.calDamage(pokemon.value, false)}</TableCell>\n                                            <TableCell align=\"right\">{this.calDamage(pokemon.value, true)}</TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}