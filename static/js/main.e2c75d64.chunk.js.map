{"version":3,"sources":["data_processor.js","PokemonSelector.js","StatusCalculator.js","App.js","serviceWorker.js","index.js"],"names":["pokemonSelectList","duplicatedForms","idx","pokemons","pokemon","evolution","length","includes","id","form","select","value","key","name","cn","push","PokemonSelector","props","handleChange","bind","pokemonList","dataProcessor","map","MenuItem","src","alt","event","this","onPokemonChange","target","className","FormControl","style","minWidth","InputLabel","Select","onChange","PropTypes","number","func","React","Component","StatusCalculator","handleEVBlur","state","IVs","EVs","natureBuff","natureNerf","updateStats","prevProps","level","base","hp","atk","def","spatk","spdef","spe","values","getBaseValues","stats","i","Math","floor","nature","setState","onStatsChange","e","Number","newValue","sum","min","max","round","texts","Grid","container","x","direction","item","xs","Input","inputProps","step","handleIVChanges","type","size","Slider","handleEVChanges","handleEVInputChanges","onBlur","Radio","checked","color","arrayOf","App","handlePokemonChange","handleStatsChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+0hPAMIA,G,YAAoB,IAClBC,EAAkB,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE3D,IAAK,IAAIC,KAAOC,EAAU,CACtB,IAAIC,EAAUD,EAASD,GAEvB,KAAIE,EAAQC,UAAUC,OAAS,MAI3BL,EAAgBM,SAASH,EAAQI,KAAOJ,EAAQK,KAAO,GAA3D,CAIA,IAAIC,EAAS,CACTC,MAAOT,EACPU,IAAKR,EAAQI,GAAK,IAAMJ,EAAQK,KAChCI,KAAMT,EAAQS,KAAKC,GAAb,YAAuBV,EAAQI,KAEzCR,EAAkBe,KAAKL,I,IC4BZM,E,YA3CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAEpB,EAAKC,YAAcC,EAAgCC,KAAI,SAAClB,GAAD,OACnD,kBAACmB,EAAA,EAAD,CAAUZ,MAAOP,EAAQO,MAAOC,IAAKR,EAAQQ,KACzC,8BACI,yBAAKY,IAAG,oBAAepB,EAAQQ,IAAvB,QACJa,IAAKrB,EAAQF,OAGrB,8BAAOE,EAAQS,UAXR,E,0EAuBNa,GACTC,KAAKV,MAAMW,gBAAgBF,EAAMG,OAAOlB,S,+BAIxC,OACI,yBAAKmB,UAAU,OACX,kBAACC,EAAA,EAAD,CAAaC,MAAO,CAAEC,SAAU,MAC5B,kBAACC,EAAA,EAAD,2BACA,kBAACC,EAAA,EAAD,CACIxB,MAAOgB,KAAKV,MAAMT,GAClB4B,SAAUT,KAAKT,cACdS,KAAKP,kB,iCAlBtB,MAAO,CACHZ,GAAI6B,IAAUC,OACdV,gBAAiBS,IAAUE,U,GApBTC,IAAMC,W,mCC6KrBC,E,YA3KX,WAAYzB,GAAQ,IAAD,8BACf,4CAAMA,KACD0B,aAAe,EAAKA,aAAaxB,KAAlB,gBAEpB,EAAKyB,MAAQ,CACTC,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAC1BC,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACrBC,WAAY,EACZC,WAAY,GARD,E,iFAsBfrB,KAAKsB,YAAYtB,KAAKiB,MAAMC,IAAKlB,KAAKiB,MAAME,IAAK,EAAG,K,yCAGrCI,GACXvB,KAAKV,MAAMb,UAAY8C,EAAU9C,SACjCuB,KAAKV,MAAMkC,QAAUD,EAAUC,OAC/BxB,KAAKsB,YAAYtB,KAAKiB,MAAMC,IAAKlB,KAAKiB,MAAME,IACxCnB,KAAKiB,MAAMG,WAAYpB,KAAKiB,MAAMI,c,sCAK1C,IAAMI,EAAOjD,EAASwB,KAAKV,MAAMb,SAASgD,KAC1C,MAAO,CAACA,EAAKC,GAAID,EAAKE,IAAKF,EAAKG,IAAKH,EAAKI,MAAOJ,EAAKK,MAAOL,EAAKM,O,kCAG1Db,EAAKC,EAAKC,EAAYC,GAG9B,IAFA,IAAMW,EAAShC,KAAKiC,gBAChBC,EAAQ,GACHC,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAMV,EAAOW,KAAKC,MAAMrC,KAAKV,MAAMkC,OAAqB,EAAZQ,EAAOG,GAASjB,EAAIiB,GAAKhB,EAAIgB,GAAK,GAAK,KACnF,GAAU,IAANA,EACAD,EAAM9C,KAAKqC,EAAOzB,KAAKV,MAAMkC,MAAQ,QAClC,CACH,IAAIc,EAAS,EACTlB,IAAeC,IACXD,IAAee,IACfG,EAAS,KAETjB,IAAec,IACfG,EAAS,KAGjBJ,EAAM9C,KAAKgD,KAAKC,OAAOZ,EAAO,GAAKa,KAG3CtC,KAAKuC,SAAS,CACVrB,IAAKA,EACLC,IAAKA,EACLC,WAAYA,EACZC,WAAYA,IAEhBrB,KAAKV,MAAMkD,cAAcN,K,sCAGb3D,EAAKkE,GACjB,IAAIvB,EAAMlB,KAAKiB,MAAMC,IACrBA,EAAI3C,GAAOmE,OAAOD,EAAEvC,OAAOlB,OAC3BgB,KAAKsB,YAAYJ,EAAKlB,KAAKiB,MAAME,IAAKnB,KAAKiB,MAAMG,WAAYpB,KAAKiB,MAAMI,c,sCAG5D9C,EAAKkE,EAAGE,GACpB,IAAIxB,EAAMnB,KAAKiB,MAAME,IACjByB,EAAM,EAFoB,uBAG9B,YAAkBzB,EAAlB,+CAAuB,CACnByB,GADmB,SAHO,kFAM9BA,GAAOzB,EAAI5C,GACX4C,EAAI5C,GAAO6D,KAAKS,IAAIF,EAAU,IAAMC,GACpC5C,KAAKsB,YAAYtB,KAAKiB,MAAMC,IAAKC,EAAKnB,KAAKiB,MAAMG,WAAYpB,KAAKiB,MAAMI,c,2CAGvD9C,EAAKkE,GACtB,IAAItB,EAAMnB,KAAKiB,MAAME,IACjByB,EAAM,EAFe,uBAGzB,YAAkBzB,EAAlB,+CAAuB,CACnByB,GADmB,SAHE,kFAMzBA,GAAOzB,EAAI5C,GACX4C,EAAI5C,GAAO6D,KAAKS,IAAIH,OAAOD,EAAEvC,OAAOlB,OAAQ,IAAM4D,GAClD5C,KAAKsB,YAAYtB,KAAKiB,MAAMC,IAAKC,EAAKnB,KAAKiB,MAAMG,WAAYpB,KAAKiB,MAAMI,c,qCAKxE,IADA,IAAIF,EAAMnB,KAAKiB,MAAME,IACZgB,EAAI,EAAGA,EAAI,IAAKA,EACrBhB,EAAIgB,GAAKC,KAAKU,IAAI,EAAGV,KAAKS,IAAI,IAAK1B,EAAIgB,KACvChB,EAAIgB,GAA8B,EAAzBC,KAAKW,MAAM5B,EAAIgB,GAAK,GAEjCnC,KAAKsB,YAAYtB,KAAKiB,MAAMC,IAAKC,EAAKnB,KAAKiB,MAAMG,WAAYpB,KAAKiB,MAAMI,c,+BAGlE,IAAD,OACCW,EAAShC,KAAKiC,gBACde,EAAQ,CAAC,KAAM,eAAM,eAAM,eAAM,eAAM,gBAC7C,OACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACV,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGvD,KAAI,SAACwD,GAAD,OACpB,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACE,UAAU,MAAMnE,IAAKkE,GACjC,kBAACF,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,GAAb,IAAgBN,EAAMG,IACtB,kBAACF,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,GAAb,IAAgBtB,EAAOmB,IACvB,kBAACF,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,GACT,kBAACC,EAAA,EAAD,CACIC,WAAY,CAAEX,IAAK,EAAGC,IAAK,GAAIW,KAAM,GACrCzE,MAAO,EAAKiC,MAAMC,IAAIiC,GACtB1C,SAAU,EAAKiD,gBAAgBlE,KAAK,EAAM2D,GAC1CQ,KAAK,SACLC,KAAK,WAGb,kBAACX,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,GACT,kBAACO,EAAA,EAAD,CACI7E,MAAO,EAAKiC,MAAME,IAAIgC,GACtB1C,SAAU,EAAKqD,gBAAgBtE,KAAK,EAAM2D,GAC1CM,KAAM,EACNZ,IAAK,EACLC,IAAK,OAGb,kBAACG,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,GACT,kBAACC,EAAA,EAAD,CACIvE,MAAO,EAAKiC,MAAME,IAAIgC,GACtB1C,SAAU,EAAKsD,qBAAqBvE,KAAK,EAAM2D,GAC/Ca,OAAQ,EAAKhD,aACbwC,WAAY,CACRC,KAAM,EACNZ,IAAK,EACLC,IAAK,IACLa,KAAM,aAIlB,kBAACV,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,GACT,kBAACW,EAAA,EAAD,CACIC,QAAS,EAAKjD,MAAMG,aAAe+B,EACnC1C,SAAU,WACN,EAAKa,YAAY,EAAKL,MAAMC,IACxB,EAAKD,MAAME,IAAKgC,EAAG,EAAKlC,MAAMI,aAEtCrC,MAAOmE,IACX,kBAACc,EAAA,EAAD,CACIE,MAAM,UACND,QAAS,EAAKjD,MAAMI,aAAe8B,EACnC1C,SAAU,WACN,EAAKa,YAAY,EAAKL,MAAMC,IACxB,EAAKD,MAAME,IAAK,EAAKF,MAAMG,WAAY+B,IAE/CnE,MAAOmE,KAEf,kBAACF,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,GACR,EAAKhE,MAAM4C,MAAMiB,Y,iCArJtC,MAAO,CACH1E,QAASiC,IAAUC,OACnBa,MAAOd,IAAUC,OACjBuB,MAAOxB,IAAU0D,QAAQ1D,IAAUC,QACnC6B,cAAe9B,IAAUE,U,GAlBNC,IAAMC,WCkCtBuD,E,YApCX,WAAY/E,GAAQ,IAAD,8BACf,4CAAMA,KACDgF,oBAAsB,EAAKA,oBAAoB9E,KAAzB,gBAC3B,EAAK+E,kBAAoB,EAAKA,kBAAkB/E,KAAvB,gBAEzB,EAAKyB,MAAQ,CACTxC,QAAS,EACT+C,MAAO,GACPU,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IARZ,E,iFAYCrD,GAChBmB,KAAKuC,SAAS,CAAE9D,QAASiE,OAAO7D,O,wCAGlBqD,GACdlC,KAAKuC,SAAS,CAAEL,MAAOA,M,+BAIvB,OACI,6BACI,kBAAC,EAAD,CACIrD,GAAImB,KAAKiB,MAAMxC,QACfwB,gBAAiBD,KAAKsE,sBAC1B,kBAAC,EAAD,CACI7F,QAASuB,KAAKiB,MAAMxC,QACpB+C,MAAO,GACPU,MAAOlC,KAAKiB,MAAMiB,MAClBM,cAAexC,KAAKuE,yB,GA/BtB1D,IAAMC,WCKJ0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e2c75d64.chunk.js","sourcesContent":["import React from 'react';\n\nimport pokemons from './data/pokemons';\nimport abilities from './data/abilities';\nimport moves from './data/moves';\n\nlet pokemonSelectList = [];\nconst duplicatedForms = [25, 773, 778, 845, 855, 869, 875, 890];\n\nfor (let idx in pokemons) {\n    let pokemon = pokemons[idx];\n\n    if (pokemon.evolution.length > 0) {\n        continue;\n    }\n\n    if (duplicatedForms.includes(pokemon.id) && pokemon.form > 0) {\n        continue;\n    }\n\n    let select = {\n        value: idx,\n        key: pokemon.id + '_' + pokemon.form,\n        name: pokemon.name.cn + ` #${pokemon.id}`,\n    };\n    pokemonSelectList.push(select);\n}\n\nexport { pokemonSelectList };\n\n","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport PropTypes from 'prop-types';\nimport * as dataProcessor from './data_processor.js';\n\nclass PokemonSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n\n        this.pokemonList = dataProcessor.pokemonSelectList.map((pokemon) => (\n            <MenuItem value={pokemon.value} key={pokemon.key}>\n                <span>\n                    <img src={`./sprites/${pokemon.key}.png`}\n                        alt={pokemon.idx}\n                    />\n                </span>\n                <span>{pokemon.name}</span>\n            </MenuItem>\n        ));\n    }\n\n    static get propTypes() {\n        return {\n            id: PropTypes.number,\n            onPokemonChange: PropTypes.func\n        };\n    }\n\n    handleChange(event) {\n        this.props.onPokemonChange(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <FormControl style={{ minWidth: 240 }}>\n                    <InputLabel>宝可梦</InputLabel>\n                    <Select\n                        value={this.props.id}\n                        onChange={this.handleChange}>\n                        {this.pokemonList}\n                    </Select>\n                </FormControl>\n            </div>\n        );\n    }\n}\n\nexport default PokemonSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Input from '@material-ui/core/Input';\nimport Slider from '@material-ui/core/Slider';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\n\nimport pokemons from './data/pokemons';\n\nclass StatusCalculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleEVBlur = this.handleEVBlur.bind(this);\n\n        this.state = {\n            IVs: [31, 31, 31, 31, 31, 31],\n            EVs: [0, 0, 0, 0, 0, 0],\n            natureBuff: 0,\n            natureNerf: 0,\n        };\n    }\n\n    static get propTypes() {\n        return {\n            pokemon: PropTypes.number,\n            level: PropTypes.number,\n            stats: PropTypes.arrayOf(PropTypes.number),\n            onStatsChange: PropTypes.func,\n        };\n    }\n\n    componentDidMount() {\n        this.updateStats(this.state.IVs, this.state.EVs, 0, 0);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.pokemon !== prevProps.pokemon ||\n            this.props.level !== prevProps.level) {\n            this.updateStats(this.state.IVs, this.state.EVs,\n                this.state.natureBuff, this.state.natureNerf);\n        }\n    }\n\n    getBaseValues() {\n        const base = pokemons[this.props.pokemon].base;\n        return [base.hp, base.atk, base.def, base.spatk, base.spdef, base.spe];\n    }\n\n    updateStats(IVs, EVs, natureBuff, natureNerf) {\n        const values = this.getBaseValues();\n        let stats = [];\n        for (let i = 0; i < 6; ++i) {\n            const base = Math.floor(this.props.level * (values[i] * 2 + IVs[i] + EVs[i] / 4) / 100);\n            if (i === 0) {\n                stats.push(base + this.props.level + 10);\n            } else {\n                let nature = 1;\n                if (natureBuff !== natureNerf) {\n                    if (natureBuff === i) {\n                        nature = 1.1;\n                    }\n                    if (natureNerf === i) {\n                        nature = 0.9;\n                    }\n                }\n                stats.push(Math.floor((base + 5) * nature));\n            }\n        }\n        this.setState({\n            IVs: IVs,\n            EVs: EVs,\n            natureBuff: natureBuff,\n            natureNerf: natureNerf,\n        });\n        this.props.onStatsChange(stats);\n    }\n\n    handleIVChanges(idx, e) {\n        let IVs = this.state.IVs;\n        IVs[idx] = Number(e.target.value);\n        this.updateStats(IVs, this.state.EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    handleEVChanges(idx, e, newValue) {\n        let EVs = this.state.EVs;\n        let sum = 0;\n        for (let value of EVs) {\n            sum += value;\n        }\n        sum -= EVs[idx];\n        EVs[idx] = Math.min(newValue, 508 - sum);\n        this.updateStats(this.state.IVs, EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    handleEVInputChanges(idx, e) {\n        let EVs = this.state.EVs;\n        let sum = 0;\n        for (let value of EVs) {\n            sum += value;\n        }\n        sum -= EVs[idx];\n        EVs[idx] = Math.min(Number(e.target.value), 508 - sum);\n        this.updateStats(this.state.IVs, EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    handleEVBlur() {\n        let EVs = this.state.EVs;\n        for (let i = 0; i < 6; ++i) {\n            EVs[i] = Math.max(0, Math.min(252, EVs[i]));\n            EVs[i] = Math.round(EVs[i] / 4) * 4;\n        }\n        this.updateStats(this.state.IVs, EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    render() {\n        const values = this.getBaseValues();\n        const texts = [\"HP\", \"物攻\", \"物防\", \"特攻\", \"特防\", \"速度\"];\n        return (\n            <Grid container>\n                {[0, 1, 2, 3, 4, 5].map((x) => (\n                    <Grid container direction=\"row\" key={x}>\n                        <Grid item xs> {texts[x]}</Grid>\n                        <Grid item xs> {values[x]}</Grid>\n                        <Grid item xs>\n                            <Input\n                                inputProps={{ min: 0, max: 31, step: 1 }}\n                                value={this.state.IVs[x]}\n                                onChange={this.handleIVChanges.bind(this, x)}\n                                type=\"number\"\n                                size=\"small\"\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <Slider\n                                value={this.state.EVs[x]}\n                                onChange={this.handleEVChanges.bind(this, x)}\n                                step={4}\n                                min={0}\n                                max={252}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <Input\n                                value={this.state.EVs[x]}\n                                onChange={this.handleEVInputChanges.bind(this, x)}\n                                onBlur={this.handleEVBlur}\n                                inputProps={{\n                                    step: 4,\n                                    min: 0,\n                                    max: 252,\n                                    type: 'number',\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            <Radio\n                                checked={this.state.natureBuff === x}\n                                onChange={() => {\n                                    this.updateStats(this.state.IVs,\n                                        this.state.EVs, x, this.state.natureNerf);\n                                }}\n                                value={x} />\n                            <Radio\n                                color='primary'\n                                checked={this.state.natureNerf === x}\n                                onChange={() => {\n                                    this.updateStats(this.state.IVs,\n                                        this.state.EVs, this.state.natureBuff, x);\n                                }}\n                                value={x} />\n                        </Grid>\n                        <Grid item xs>\n                            {this.props.stats[x]}\n                        </Grid>\n                    </Grid>\n                ))}\n            </Grid>\n        );\n    }\n}\n\nexport default StatusCalculator;","import React from 'react';\n\nimport './App.css';\n\nimport PokemonSelector from './PokemonSelector.js'\nimport StatusCalculator from './StatusCalculator.js'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handlePokemonChange = this.handlePokemonChange.bind(this);\n        this.handleStatsChange = this.handleStatsChange.bind(this);\n\n        this.state = {\n            pokemon: 5,\n            level: 50,\n            stats: [0, 0, 0, 0, 0, 0],\n        };\n    }\n\n    handlePokemonChange(id) {\n        this.setState({ pokemon: Number(id) });\n    }\n\n    handleStatsChange(stats) {\n        this.setState({ stats: stats });\n    }\n\n    render() {\n        return (\n            <div>\n                <PokemonSelector\n                    id={this.state.pokemon}\n                    onPokemonChange={this.handlePokemonChange} />\n                <StatusCalculator\n                    pokemon={this.state.pokemon}\n                    level={50}\n                    stats={this.state.stats}\n                    onStatsChange={this.handleStatsChange} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}