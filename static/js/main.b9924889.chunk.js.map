{"version":3,"sources":["data_processor.js","PokemonSelector.js","App.js","serviceWorker.js","index.js"],"names":["pokemonSelectList","duplicatedForms","idx","pokemons","pokemon","evolution","length","includes","id","form","select","value","key","name","cn","push","PokemonSelector","props","handleChange","bind","pokemonList","dataProcessor","map","MenuItem","src","alt","event","this","onPokemonChange","target","className","FormControl","style","minWidth","InputLabel","Select","onChange","React","Component","App","handlePokemonChange","handleEVBlur","state","level","IVs","EVs","natureBuff","natureNerf","setState","base","hp","atk","def","spatk","spdef","spe","e","newValue","Number","i","Math","max","min","round","values","getBaseValues","floor","nature","Grid","container","x","direction","item","xs","Input","inputProps","step","handleIVChanges","type","size","Slider","handleEVChanges","handleEVInputChanges","onBlur","Radio","checked","color","getAbility","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9924889.chunk.js","sourcesContent":["import React from 'react';\n\nimport pokemons from './data/pokemons';\nimport abilities from './data/abilities';\nimport moves from './data/moves';\n\nlet pokemonSelectList = [];\nconst duplicatedForms = [25, 773, 778, 845, 855, 869, 875, 890];\n\nfor (let idx in pokemons) {\n    let pokemon = pokemons[idx];\n\n    if (pokemon.evolution.length > 0) {\n        continue;\n    }\n\n    if (duplicatedForms.includes(pokemon.id) && pokemon.form > 0) {\n        continue;\n    }\n\n    let select = {\n        value: idx,\n        key: pokemon.id + '_' + pokemon.form,\n        name: pokemon.name.cn + ` #${pokemon.id}`,\n    };\n    pokemonSelectList.push(select);\n}\n\nexport { pokemonSelectList };\n\n","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport * as dataProcessor from './data_processor.js';\n\nclass PokemonSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n\n        this.pokemonList = dataProcessor.pokemonSelectList.map((pokemon) => (\n            <MenuItem value={pokemon.value} key={pokemon.key}>\n                <span>\n                    <img src={`./sprites/${pokemon.key}.png`}\n                        alt={pokemon.idx}\n                    />\n                </span>\n                <span>{pokemon.name}</span>\n            </MenuItem>\n        ));\n    }\n\n    handleChange(event) {\n        this.props.onPokemonChange(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <FormControl style={{ minWidth: 240 }}>\n                    <InputLabel>宝可梦</InputLabel>\n                    <Select\n                        value={this.props.id}\n                        onChange={this.handleChange}>\n                        {this.pokemonList}\n                    </Select>\n                </FormControl>\n            </div>\n        );\n    }\n}\n\nexport default PokemonSelector;","import React from 'react';\n\nimport './App.css';\n\nimport Input from '@material-ui/core/Input';\nimport Slider from '@material-ui/core/Slider';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\n\nimport PokemonSelector from './PokemonSelector.js'\nimport pokemons from './data/pokemons';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handlePokemonChange = this.handlePokemonChange.bind(this);\n        this.handleEVBlur = this.handleEVBlur.bind(this);\n\n        this.state = {\n            pokemon: 5,\n            level: 50,\n            IVs: [31, 31, 31, 31, 31, 31],\n            EVs: [0, 0, 0, 0, 0, 0],\n            natureBuff: 0,\n            natureNerf: 0,\n        };\n    }\n\n    handlePokemonChange(id) {\n        this.setState({ pokemon: id });\n    }\n\n    getBaseValues() {\n        const base = pokemons[this.state.pokemon].base;\n        return [base.hp, base.atk, base.def, base.spatk, base.spdef, base.spe];\n    }\n\n    handleIVChanges(idx, e) {\n        let IVs = this.state.IVs;\n        IVs[idx] = e.target.value;\n        this.setState({ IVs: IVs });\n    }\n\n    handleEVChanges(idx, e, newValue) {\n        let EVs = this.state.EVs;\n        EVs[idx] = newValue;\n        this.setState({ EVs: EVs });\n    }\n\n    handleEVInputChanges(idx, e) {\n        let EVs = this.state.EVs;\n        EVs[idx] = Number(e.target.value);\n        this.setState({ EVs: EVs });\n    }\n\n    handleEVBlur() {\n        let EVs = this.state.EVs;\n        for (let i = 0; i < 6; ++i) {\n            EVs[i] = Math.max(0, Math.min(252, EVs[i]));\n            EVs[i] = Math.round(EVs[i] / 4) * 4;\n        }\n        this.setState({ EVs: EVs });\n    }\n\n    getAbility(idx) {\n        const values = this.getBaseValues();\n        const base = Math.floor(this.state.level * (values[idx] * 2 + this.state.IVs[idx] + this.state.EVs[idx] / 4) / 100);\n        if (idx === 0) {\n            return base + this.state.level + 10;\n        } else {\n            let nature = 1;\n            if (this.state.natureBuff != this.state.natureNerf) {\n                if (this.state.natureBuff == idx) {\n                    nature = 1.1;\n                }\n                if (this.state.natureNerf == idx) {\n                    nature = 0.9;\n                }\n            }\n            return Math.floor((base + 5) * nature);\n        }\n    }\n\n    render() {\n        const values = this.getBaseValues();\n        return (\n            <div>\n                <PokemonSelector\n                    id={this.state.pokemon}\n                    onPokemonChange={this.handlePokemonChange} />\n                {/* <div>{JSON.stringify(pokemons[this.state.pokemon])}</div> */}\n                <Grid container>\n                    {[0, 1, 2, 3, 4, 5].map((x) => (\n                        <Grid container direction=\"row\" key={x}>\n                            <Grid item xs> {values[x]}</Grid>\n                            <Grid item xs>\n                                <Input\n                                    inputProps={{ min: 0, max: 31, step: 1 }}\n                                    value={this.state.IVs[x]}\n                                    onChange={this.handleIVChanges.bind(this, x)}\n                                    type=\"number\"\n                                    size=\"small\"\n                                />\n                            </Grid>\n                            <Grid item xs>\n                                <Slider\n                                    value={this.state.EVs[x]}\n                                    onChange={this.handleEVChanges.bind(this, x)}\n                                    step={4}\n                                    min={0}\n                                    max={252}\n                                />\n                            </Grid>\n                            <Grid item xs>\n                                <Input\n                                    value={this.state.EVs[x]}\n                                    onChange={this.handleEVInputChanges.bind(this, x)}\n                                    onBlur={this.handleEVBlur}\n                                    inputProps={{\n                                        step: 4,\n                                        min: 0,\n                                        max: 252,\n                                        type: 'number',\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs>\n                                <Radio\n                                    checked={this.state.natureBuff === x}\n                                    onChange={() => {\n                                        this.setState({ natureBuff: x });\n                                    }}\n                                    value={x} />\n                                <Radio\n                                    color='primary'\n                                    checked={this.state.natureNerf === x}\n                                    onChange={() => {\n                                        this.setState({ natureNerf: x });\n                                    }}\n                                    value={x} />\n                            </Grid>\n                            <Grid item xs>\n                                {this.getAbility(x)}\n                            </Grid>\n                        </Grid>\n                    ))}\n                </Grid>\n            </div >\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}