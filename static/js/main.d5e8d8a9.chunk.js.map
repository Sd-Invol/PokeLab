{"version":3,"sources":["data_processor.js","PokemonSelector.js","StatusCalculator.js","App.js","serviceWorker.js","index.js"],"names":["pokemonSelectList","duplicatedForms","idx","pokemons","pokemon","evolution","length","includes","id","form","select","value","key","name","cn","push","PokemonSelector","props","handleChange","bind","dataProcessor","find","Number","event","newValue","this","onPokemonChange","Grid","container","direction","justify","src","process","style","height","alt","Autocomplete","width","onChange","options","getOptionSelected","option","getOptionLabel","renderOption","Fragment","alignItems","item","xs","renderInput","params","TextField","label","variant","inputProps","autoComplete","PropTypes","number","func","React","Component","StatusCalculator","handleEVBlur","state","IVs","EVs","natureBuff","natureNerf","updateStats","prevProps","level","base","hp","atk","def","spatk","spdef","spe","values","getBaseValues","stats","i","Math","floor","nature","setState","onStatsChange","e","target","sum","min","max","round","texts","padding","spacing","Button","color","onClick","reduce","a","b","map","x","Input","step","handleIVChanges","type","size","Slider","handleEVChanges","handleEVInputChanges","onBlur","Radio","checked","arrayOf","App","handlePokemonChange","calDamage","move","types_cn_to_en","types","foeId","extreme","moves","power","class","typeBonus","maxDamage","maxPercent","toFixed","spa","isNaN","moveSet","sort","damages","getDamage","pokemonList","Container","margin","border","borderRadius","List","dense","Tooltip","title","description","placement","arrow","ListItem","button","selected","toLowerCase","marginRight","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5e8d8a9.chunk.js","sourcesContent":["import pokemons from './data/pokemons';\n// import moves from './data/moves';\n// import types from './data/types';\n\nlet pokemonSelectList = [];\nconst duplicatedForms = [25, 423, 550, 647, 649, 773, 778, 801, 845, 849, 855, 869, 875, 877, 890, 893];\n\nfor (let idx in pokemons) {\n    let pokemon = pokemons[idx];\n\n    if (pokemon.evolution.length > 0) {\n        continue;\n    }\n\n    // Removed as Pokemon home is opened.\n    // if (pokemon.galardex < 0) {\n    //     continue;\n    // }\n\n    if (duplicatedForms.includes(pokemon.id) && pokemon.form > 0) {\n        continue;\n    }\n\n    let select = {\n        value: idx,\n        key: pokemon.id + '_' + pokemon.form,\n        name: pokemon.name.cn + ` #${pokemon.id}`,\n    };\n    pokemonSelectList.push(select);\n}\n\n// let types_cn_to_en = {};\n// for (let type in types) {\n//     types_cn_to_en[types[type].cn] = type;\n// }\n\n// for (let idx in pokemons) {\n//     let pokemon = pokemons[idx];\n\n//     let moveByType = {};\n//     for (let moveId of pokemon.moves) {\n//         const move = moves[moveId];\n//         if (move.class === '变化') {\n//             continue;\n//         }\n//         if (!(move.type in moveByType)) {\n//             moveByType[move.type] = {\n//                 physical: [],\n//                 special: [],\n//             }\n//         }\n//         if (move.class === '物理') {\n//             moveByType[move.type].physical.push(move);\n//         }\n//         if (move.class === '特殊') {\n//             moveByType[move.type].special.push(move);\n//         }\n//     }\n//     for (let type in moveByType) {\n//         moveByType[type].physical = moveByType[type].physical.sort(\n//             (a, b) => Number(b.power) - Number(a.power));\n//         moveByType[type].special = moveByType[type].special.sort(\n//             (a, b) => Number(b.power) - Number(a.power));\n//     }\n// }\n\nexport { pokemonSelectList };\n","import React from 'react';\nimport * as dataProcessor from './data_processor.js';\n\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nclass PokemonSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n\n        this.value = dataProcessor.pokemonSelectList.find((pokemon) => Number(pokemon.value) === this.props.id);\n    }\n\n    static get propTypes() {\n        return {\n            id: PropTypes.number,\n            onPokemonChange: PropTypes.func\n        };\n    }\n\n    handleChange(event, newValue) {\n        if (newValue) {\n            this.value = newValue;\n            this.props.onPokemonChange(newValue.value);\n        }\n    }\n\n    render() {\n        return (\n            <Grid container direction=\"row\" justify=\"flex-start\">\n                <img src={process.env.PUBLIC_URL + `/sprites/${this.value.key}.png`} style={{ height: \"48px\" }}\n                    alt={this.value.idx} />\n                <Autocomplete\n                    style={{ width: 240 }}\n                    value={this.value}\n                    onChange={this.handleChange}\n                    options={dataProcessor.pokemonSelectList}\n                    getOptionSelected={(option, value) => option.value === value.value}\n                    getOptionLabel={(pokemon) => pokemon.name}\n                    renderOption={(pokemon) => (\n                        <React.Fragment>\n                            <Grid container justify=\"flex-start\" alignItems=\"center\">\n                                <Grid item container xs={4} justify=\"center\" alignItems=\"center\">\n                                    <img src={process.env.PUBLIC_URL + `/sprites/${pokemon.key}.png`} style={{ height: \"40px\" }}\n                                        alt={pokemon.idx} />\n                                </Grid>\n                                <span>{pokemon.name}</span>\n                            </Grid>\n                        </React.Fragment>\n                    )}\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            label=\"宝可梦\"\n                            variant=\"outlined\"\n                            inputProps={{\n                                ...params.inputProps,\n                                autoComplete: 'new-password', // disable autocomplete and autofill\n                            }}\n                        />\n                    )}\n                />\n            </Grid>\n        );\n    }\n}\n\nexport default PokemonSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport Slider from '@material-ui/core/Slider';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\n\nimport pokemons from './data/pokemons';\n\nclass StatusCalculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleEVBlur = this.handleEVBlur.bind(this);\n\n        this.state = {\n            IVs: [31, 31, 31, 31, 31, 31],\n            EVs: [0, 0, 0, 0, 0, 0],\n            natureBuff: 0,\n            natureNerf: 0,\n        };\n    }\n\n    static get propTypes() {\n        return {\n            pokemon: PropTypes.number,\n            level: PropTypes.number,\n            stats: PropTypes.arrayOf(PropTypes.number),\n            onStatsChange: PropTypes.func,\n        };\n    }\n\n    componentDidMount() {\n        this.updateStats(this.state.IVs, this.state.EVs, 0, 0);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.pokemon !== prevProps.pokemon ||\n            this.props.level !== prevProps.level) {\n            this.updateStats(this.state.IVs, this.state.EVs,\n                this.state.natureBuff, this.state.natureNerf);\n        }\n    }\n\n    getBaseValues() {\n        const base = pokemons[this.props.pokemon].base;\n        return [base.hp, base.atk, base.def, base.spatk, base.spdef, base.spe];\n    }\n\n    updateStats(IVs, EVs, natureBuff, natureNerf) {\n        const values = this.getBaseValues();\n        let stats = [];\n        for (let i = 0; i < 6; ++i) {\n            const base = Math.floor(this.props.level * (values[i] * 2 + IVs[i] + EVs[i] / 4) / 100);\n            if (i === 0) {\n                stats.push(base + this.props.level + 10);\n            } else {\n                let nature = 1;\n                if (natureBuff !== natureNerf) {\n                    if (natureBuff === i) {\n                        nature = 1.1;\n                    }\n                    if (natureNerf === i) {\n                        nature = 0.9;\n                    }\n                }\n                stats.push(Math.floor((base + 5) * nature));\n            }\n        }\n        this.setState({\n            IVs: IVs,\n            EVs: EVs,\n            natureBuff: natureBuff,\n            natureNerf: natureNerf,\n        });\n        this.props.onStatsChange(stats);\n    }\n\n    handleIVChanges(idx, e) {\n        let IVs = this.state.IVs;\n        IVs[idx] = Number(e.target.value);\n        this.updateStats(IVs, this.state.EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    handleEVChanges(idx, e, newValue) {\n        let EVs = this.state.EVs;\n        let sum = 0;\n        for (let value of EVs) {\n            sum += value;\n        }\n        sum -= EVs[idx];\n        EVs[idx] = Math.min(newValue, 508 - sum);\n        this.updateStats(this.state.IVs, EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    handleEVInputChanges(idx, e) {\n        let EVs = this.state.EVs;\n        let sum = 0;\n        for (let value of EVs) {\n            sum += value;\n        }\n        sum -= EVs[idx];\n        EVs[idx] = Math.min(Number(e.target.value), 508 - sum);\n        this.updateStats(this.state.IVs, EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    handleEVBlur() {\n        let EVs = this.state.EVs;\n        for (let i = 0; i < 6; ++i) {\n            EVs[i] = Math.max(0, Math.min(252, EVs[i]));\n            EVs[i] = Math.round(EVs[i] / 4) * 4;\n        }\n        this.updateStats(this.state.IVs, EVs, this.state.natureBuff, this.state.natureNerf);\n    }\n\n    render() {\n        const values = this.getBaseValues();\n        const texts = [\"HP\", \"物攻\", \"物防\", \"特攻\", \"特防\", \"速度\"];\n        return (\n            <Grid container\n                direction=\"column\"\n                style={{ padding: \"10px\" }}>\n                <Grid container item direction=\"row\" spacing={1}>\n                    <Grid item xs={1} container justify=\"center\" alignItems=\"center\">\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => {\n                            this.updateStats([31, 31, 31, 31, 31, 31], [0, 0, 0, 0, 0, 0], 0, 0);\n                        }}>重置</Button>\n                    </Grid>\n                    <Grid item xs={2} container justify=\"center\" alignItems=\"center\">种族值</Grid>\n                    <Grid item xs={2} container justify=\"center\" alignItems=\"center\">个体值</Grid>\n                    <Grid item xs={3} container justify=\"center\" alignItems=\"center\">\n                        努力值({\n                            510 - this.state.EVs.reduce((a, b) => a + b, 0)\n                        })\n                    </Grid>\n                    <Grid item xs={2} container justify=\"center\" alignItems=\"center\">\n                        性格修正</Grid>\n                    <Grid item xs={2} container justify=\"center\" alignItems=\"center\">能力</Grid>\n                </Grid>\n                {[0, 1, 2, 3, 4, 5].map((x) => (\n                    <Grid container item direction=\"row\" key={x} spacing={1}>\n                        <Grid item xs={1} container justify=\"center\" alignItems=\"center\">\n                            {texts[x]}\n                        </Grid>\n                        <Grid item xs={2} container justify=\"center\" alignItems=\"center\">\n                            {values[x]}\n                        </Grid>\n                        <Grid item xs={2} container justify=\"center\" alignItems=\"center\">\n                            <Input\n                                inputProps={{ min: 0, max: 31, step: 1 }}\n                                value={this.state.IVs[x]}\n                                onChange={this.handleIVChanges.bind(this, x)}\n                                type=\"number\"\n                                size=\"small\"\n                            />\n                        </Grid>\n                        <Grid item xs={2} container justify=\"center\" alignItems=\"center\">\n                            <Slider\n                                value={this.state.EVs[x]}\n                                onChange={this.handleEVChanges.bind(this, x)}\n                                step={4} min={0} max={252}\n                            />\n                        </Grid>\n                        <Grid item xs={1} container justify=\"center\" alignItems=\"center\">\n                            <Input\n                                value={this.state.EVs[x]}\n                                onChange={this.handleEVInputChanges.bind(this, x)}\n                                onBlur={this.handleEVBlur}\n                                inputProps={{\n                                    step: 4,\n                                    min: 0,\n                                    max: 252,\n                                    type: 'number',\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={2} container justify=\"center\" alignItems=\"center\">\n                            <Radio\n                                checked={this.state.natureBuff === x}\n                                onChange={() => {\n                                    this.updateStats(this.state.IVs,\n                                        this.state.EVs, x, this.state.natureNerf);\n                                }}\n                                value={x} />\n                            <Radio\n                                color='primary'\n                                checked={this.state.natureNerf === x}\n                                onChange={() => {\n                                    this.updateStats(this.state.IVs,\n                                        this.state.EVs, this.state.natureBuff, x);\n                                }}\n                                value={x} />\n                        </Grid>\n                        <Grid item xs={2} container justify=\"center\" alignItems=\"center\">\n                            {this.props.stats[x]}\n                        </Grid>\n                    </Grid>\n                ))}\n            </Grid>\n        );\n    }\n}\n\nexport default StatusCalculator;","import React from 'react';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport './App.css';\n\nimport PokemonSelector from './PokemonSelector.js'\nimport StatusCalculator from './StatusCalculator.js'\nimport * as dataProcessor from './data_processor.js';\n\nimport pokemons from './data/pokemons';\nimport moves from './data/moves';\nimport types from './data/types';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handlePokemonChange = this.handlePokemonChange.bind(this);\n        this.calDamage = this.calDamage.bind(this);\n\n        this.state = {\n            pokemon: 5,\n            level: 50,\n            stats: [0, 0, 0, 0, 0, 0],\n            move: -1,\n        };\n\n        this.types_cn_to_en = {};\n        for (let type in types) {\n            this.types_cn_to_en[types[type].cn] = type;\n        }\n    }\n\n    handlePokemonChange(id) {\n        this.setState({ pokemon: Number(id), move: -1 });\n    }\n\n    calDamage(foeId, extreme) {\n        if (this.state.move === -1) {\n            return \"\";\n        }\n\n        const move = moves[this.state.move];\n        const base = pokemons[foeId].base;\n\n        let hp = base.hp, def = base.def, power = Number(move.power);\n        if (move.class === '特殊') {\n            def = base.spdef;\n            power *= this.state.stats[3];\n        } else {\n            power *= this.state.stats[1];\n        }\n\n        if (!extreme) {\n            hp = Math.floor(this.state.level * (hp * 2 + 31) / 100) + this.state.level + 10;\n            def = Math.floor(this.state.level * (def * 2 + 31) / 100) + 5;\n        } else {\n            hp = Math.floor(this.state.level * (hp * 2 + 31 + 63) / 100) + this.state.level + 10;\n            def = Math.floor((Math.floor(this.state.level * (def * 2 + 31 + 63) / 100) + 5) * 1.1);\n        }\n\n        let typeBonus = 1;\n        for (let type of pokemons[this.state.pokemon].type) {\n            if (types[type].cn === move.type) {\n                typeBonus *= 1.5;\n            }\n        }\n        let type = types[this.types_cn_to_en[move.type]];\n        for (let t of pokemons[foeId].type) {\n            typeBonus *= type[t];\n        }\n        let maxDamage = ((2 * this.state.level + 10) / 250 * power / def + 2) * typeBonus;\n        let minDamage = maxDamage * 0.85;\n        let maxPercent = maxDamage / hp * 100;\n        let minPercent = minDamage / hp * 100;\n\n        return `[${minPercent.toFixed(2)}%, ${maxPercent.toFixed(2)}%]`;\n    }\n\n    getDamage(foeId) {\n        if (this.state.move === -1) {\n            return 0;\n        }\n\n        const move = moves[this.state.move];\n        const base = pokemons[foeId].base;\n\n        let hp = base.hp, def = base.def, power = Number(move.power);\n        if (move.class === '特殊') {\n            def = base.spdef;\n            power *= this.state.stats[3];\n        } else {\n            power *= this.state.stats[1];\n        }\n\n        hp = Math.floor(this.state.level * (hp * 2 + 31) / 100) + this.state.level + 10;\n        def = Math.floor(this.state.level * (def * 2 + 31) / 100) + 5;\n\n        let typeBonus = 1;\n        for (let type of pokemons[this.state.pokemon].type) {\n            if (types[type].cn === move.type) {\n                typeBonus *= 1.5;\n            }\n        }\n        let type = types[this.types_cn_to_en[move.type]];\n        for (let t of pokemons[foeId].type) {\n            typeBonus *= type[t];\n        }\n        return ((2 * this.state.level + 10) / 250 * power / def + 2) * typeBonus / hp;\n    }\n\n    render() {\n        const pokemon = this.state.pokemon;\n        const atk = this.state.stats[1];\n        const spa = this.state.stats[3];\n        const power = function (x) {\n            let typeBonus = 1;\n            for (let type of pokemons[pokemon].type) {\n                if (types[type].cn === moves[x].type) {\n                    typeBonus = 1.5;\n                }\n            }\n            if (moves[x].class === '变化' || isNaN(moves[x].power)) {\n                return -Number(moves[x].id);\n            } else if (moves[x].class === '物理') {\n                return atk * Number(moves[x].power) * typeBonus;\n            } else {\n                return spa * Number(moves[x].power) * typeBonus;\n            }\n        };\n        const moveSet = pokemons[this.state.pokemon].moves\n            .sort((a, b) => power(b) - power(a));\n\n\n        const damages = {};\n        for (let pokemon of dataProcessor.pokemonSelectList) {\n            damages[pokemon.value] = this.getDamage(pokemon.value, false);\n        }\n        const pokemonList = dataProcessor.pokemonSelectList.sort((a, b) =>\n            damages[b.value] - damages[a.value]\n        );\n\n        return (\n            <Container>\n                <div style={{ margin: \"8px\" }}>\n                    <Grid container direction=\"row\" style={{ margin: \"8px\", border: \"1px #eee solid\", borderRadius: \"16px\", width: \"100%\" }}>\n                        <Grid item xs={4} style={{ padding: \"8px\" }}>\n                            <PokemonSelector\n                                id={this.state.pokemon}\n                                onPokemonChange={this.handlePokemonChange} />\n                        </Grid>\n                        <Grid item xs={8}>\n                            <StatusCalculator\n                                pokemon={this.state.pokemon}\n                                level={50}\n                                stats={this.state.stats}\n                                onStatsChange={(stats) => this.setState({ stats: stats })} />\n                        </Grid>\n                    </Grid>\n                </div>\n                <Grid container direction=\"row\">\n                    <Grid item xs={3}>\n                        <List dense={true}>\n                            {moveSet.map(x => (\n                                <Tooltip title={moves[x].description} placement=\"left\" arrow key={moves[x].id}>\n                                    <ListItem button\n                                        alignItems=\"center\"\n                                        onClick={() => {\n                                            if (power(x) > 0) {\n                                                this.setState({ move: moves[x].id });\n                                            }\n                                        }}\n                                        selected={this.state.move === moves[x].id}>\n                                        <img src={process.env.PUBLIC_URL + `/icons/${moves[x].class}.png`} alt={{ x }}\n                                            style={{ height: \"20px\" }} />\n                                        <img src={process.env.PUBLIC_URL + `/icons/types/${this.types_cn_to_en[moves[x].type].toLowerCase()}.svg`} alt={{ x }}\n                                            style={{ height: \"20px\", marginRight: \"2px\" }} />\n                                        <span>{moves[x].name.cn}({moves[x].power})</span>\n                                    </ListItem>\n                                </Tooltip>))}\n                        </List>\n                    </Grid>\n                    <Grid item xs={9}>\n                        <TableContainer>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell align=\"right\">宝可梦</TableCell>\n                                        <TableCell align=\"right\">无耐久伤害</TableCell>\n                                        <TableCell align=\"right\">极限耐久伤害</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {pokemonList.map((pokemon) => (\n                                        <TableRow key={pokemon.value}>\n                                            <TableCell align=\"right\">\n                                                <img src={process.env.PUBLIC_URL + `/sprites/${pokemon.key}.png`}\n                                                    alt={pokemon.idx}\n                                                    style={{ height: \"24px\" }} />\n                                                {pokemon.name}\n                                            </TableCell>\n                                            <TableCell align=\"right\">{this.calDamage(pokemon.value, false)}</TableCell>\n                                            <TableCell align=\"right\">{this.calDamage(pokemon.value, true)}</TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                </Grid>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}